import random

def func():
    """
    This Python function takes user input of single or multiple numbers, adds valid integers to a list,
    and returns the minimum value in the list.
    :return: The function `func` is returning the minimum value from the list of numbers entered by the
    user. If the user enters a single or multiple numbers, the function adds them to a list and then
    returns the minimum value from that list. If the user enters '1' to end the input, the function
    stops taking input and returns the minimum value from the list. If no numbers are entered, the
    """
    num_list = []
    break_flag = False
    while True:
        nums = input("Enter a single or multiple numbers divided by space (type 1 to end the input): ")
        num_l = nums.split()
        size = len(num_l)
        if nums == "1":
            break
        if size > 1:
            for i in range(size):
                if num_l[i] == '1':
                    break_flag = True
                    break
                if num_l[i] == '-0':
                    num_list.append('0')
                    print(f"Number 0 was added to the list.")
                    continue
                if is_string(num_l[i]):
                    print(f"You can't enter a string. Only integers are allowed.")
                    continue
                if is_float(num_l[i]):
                    print(f"Invalid input: {num_l[i]} is a float.")
                    continue
                else:
                    num_list.append(num_l[i])
                    print(f"Number {num_l[i]} was added to the list.")
            if break_flag:
                break
        elif size == 1:
            if num_l[0] == '-0':
               num_list.append('0')
               print(f"Number 0 was added to the list.")
               continue 
            if is_string(num_l[0]):
                print(f"You can't enter a string. Only integers are allowed.")
                continue
            if is_float(num_l[0]):
                print(f"Invalid input: {num_l[0]} is a float.")
                continue
            else:
                num_list.append(num_l[0])
                print(f"Number {num_l[0]} was added to the list.")
    if num_list:
        num_list = [int(num) for num in num_list]
        print(num_list)
        return min(num_list)
    else:
        return None

def is_string(value):
    """
    The function `is_string` checks if a given value is a string by attempting to convert it to a float
    and returning True if it raises a ValueError.
    
    :param value: The function `is_string` checks if the input value is a string or not. It attempts to
    convert the value to a float using the `float()` function. If the conversion is successful, it means
    the input value is a number and not a string, so the function returns `False`. If
    :return: The function `is_string` checks if the input `value` is a string or not. If the input can
    be converted to a float without raising a `ValueError`, then it is not a string and the function
    returns `False`. If a `ValueError` is raised during the conversion attempt, then the input is
    considered a string and the function returns `True`.
    """
    try:
        float(value)
        return False
    except ValueError:
        return True

def is_float(value):
    """
    The function `is_float` checks if a given value is a floating-point number.
    
    :param value: The function `is_float` checks if the input value is a float number. It splits the
    input value by the decimal point and if the length of the resulting list is not equal to 1, it means
    the input value is a float number and the function returns True. Otherwise, it returns False
    :return: The function is checking if the input value is a float by splitting the value at the
    decimal point and checking if the resulting list has more than one element. If the value is a float,
    the function will return True, otherwise it will return False.
    """
    if len(value.split('.')) != 1:
        return True
    else:
        return False

def gen(n):
    """
    The function `gen` generates a sequence of random integers between -1000 and 1000.
    
    :param n: The parameter `n` in the `gen` function represents the number of random integers that will
    be generated by the function using the `random.randint(-1000, 1000)` function
    """
    for i in range(n):
        yield random.randint(-1000,1000)

def auto_func(generator):
    """
    The function `auto_func` takes a generator as input, collects all the numbers generated into a list,
    prints the list if it's not empty, and returns the minimum number in the list or None if the list is
    empty.
    
    :param generator: The `generator` parameter in the `auto_func` function is expected to be an
    iterable object that yields values one at a time when iterated over. This function will iterate over
    the generator, store the values in a list, print the list, and then return the minimum value from
    the list
    :return: The function `auto_func` returns the minimum value from the numbers generated by the input
    generator function. If the generator produces no numbers, the function returns `None`.
    """
    num_list = []
    for num in generator:
        num_list.append(num)
    if num_list:
        print(num_list)
        return min(num_list)
    else:
        return None